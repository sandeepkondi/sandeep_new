package com.beyontec.mol.exception;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;

public enum ErrorCode {

	// General
	DATABASE_CONSTRAINT_VIOLATION("450", HttpStatus.BAD_REQUEST),
    DATABASE_ACCESS_ERROR("451", HttpStatus.INTERNAL_SERVER_ERROR),
	ENTITY_NOT_FOUND("452", HttpStatus.BAD_REQUEST),
    ENTITY_NOT_FOUND_WITH_ENTITY_NAME("470", HttpStatus.NOT_FOUND),
	OAUTH_SERVER_ERROR("453", HttpStatus.INTERNAL_SERVER_ERROR),
    INTERNAL_SERVER_ERROR("454", HttpStatus.INTERNAL_SERVER_ERROR),
	STRING_TO_DATE_CONVERTION_FAILED("AC001", HttpStatus.BAD_REQUEST),
    PERSIST_ERROR("469", HttpStatus.INTERNAL_SERVER_ERROR),
    MODEL_MAPPER_ERROR("MODEL_MAPPER_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
    ERROR_DETAILS("", HttpStatus.BAD_REQUEST),

	// Authentication
    UNAUTHORIZED_ACCESS("455", HttpStatus.BAD_REQUEST),
	EMPTY_USERNAME("456", HttpStatus.BAD_REQUEST),
	EMPTY_PASSWORD("457", HttpStatus.BAD_REQUEST),
    USER_NOT_FOUND("458", HttpStatus.NOT_FOUND),
    INVALID_PASSWORD("459", HttpStatus.NOT_FOUND),
    NO_DEFAULT_ROLES("460", HttpStatus.NOT_FOUND),
    NO_DEFAULT_DIVISION_DEPARTMENT("461", HttpStatus.NOT_FOUND),
    EXPIRED_PASSWORD("462", HttpStatus.NOT_FOUND),

	// Claim
	INVALID_DATES("463", HttpStatus.BAD_REQUEST),

	// Document upload
	DOCUMENT_BEYOND_LIMIT("464", HttpStatus.INTERNAL_SERVER_ERROR),
	DOCUMENTS_BEYOND_LIMIT("465", HttpStatus.INTERNAL_SERVER_ERROR),
	MALFORMED_JSON_EXCEPTION("466", HttpStatus.BAD_REQUEST),

    // Encrypt/Decrypt
    ENCRYPTION_ERROR("467", HttpStatus.INTERNAL_SERVER_ERROR),
    DECRYPTION_ERROR("468", HttpStatus.INTERNAL_SERVER_ERROR),

	// Create Certificate
    DOB_GREATER_VISA_APPROVAL("WD001", HttpStatus.BAD_REQUEST),
	EMPTY_MANDATORY_FIELD("WD002", HttpStatus.BAD_REQUEST),
    INVALID_CODIFIED_VALUE("WD003", HttpStatus.BAD_REQUEST),
    PREVIOUS_POLICY_INVALID("WD004", HttpStatus.BAD_REQUEST),
	CERTIFICATE_EXIST("WD006", HttpStatus.BAD_REQUEST),
    CERTIFICATE_ISSUED("WD007", HttpStatus.BAD_REQUEST),
	UNHANDLED_EXCEPTION("WD008", HttpStatus.BAD_REQUEST),
	CERTIFICATE_DOB_FORMAT_INVALID("WD009", HttpStatus.BAD_REQUEST),
    CERTIFICATE_VISA_APPROVAL_DATE_FORMAT_INVALID("WD010", HttpStatus.BAD_REQUEST),
    CERTIFICATE_VISA_EXPIRATION_DATE_FORMAT_INVALID("WD011", HttpStatus.BAD_REQUEST),
    MASTER_POLICY_NOT_FOUND("WD012", HttpStatus.NOT_FOUND),
    CERT_DOB_GREATER_THAN_EQ_TO_CURRENT_DATE("WD013", HttpStatus.BAD_REQUEST),
    CERT_VISA_APP_DATE_GREATER_THAN_EQ_TO_VISA_EXP_DATE("WD014", HttpStatus.BAD_REQUEST),
    NOT_A_DIGIT("WD017", HttpStatus.NOT_FOUND),
    UDS_ID_DEF_NOT_FOUND("WD015", HttpStatus.NOT_FOUND),
    UDS_ID_DEFS_NOT_FOUND("WD016", HttpStatus.NOT_FOUND),
    CERTIFICATE_DUPLICATE("WD018", HttpStatus.BAD_REQUEST),

	// Cancel Certificate
	CANCEL_LESS_VISA_APPROVAL("CC001", HttpStatus.BAD_REQUEST),
	CANCEL_OUT_OF_CERTIFICATE("CC002", HttpStatus.BAD_REQUEST),
	CERTIFICATE_NOT_AVAILABLE("CC003", HttpStatus.BAD_REQUEST),
	ALREADY_CANCELLED_CERTIFICATE("CC004", HttpStatus.BAD_REQUEST),
	CANCELLED_CERTIFICATE("CC005", HttpStatus.BAD_REQUEST),
	UNHANDLED_CANCEL_CERTIFICATE_EXCEPTION("CC006", HttpStatus.BAD_REQUEST),
	EMPTY_MANDATORY_FIELD_CANCEL_CERTIFICATE("CC007", HttpStatus.BAD_REQUEST),
	CERTIFICATE_LABOUR_REFERENCE_MISMATCH("CC008", HttpStatus.BAD_REQUEST),
	CLAIM_LAUNCH_DATE_FORMAT_INVALID("CC009", HttpStatus.BAD_REQUEST),
	CERTIFICATE_CANCEL_SUCCESS("CC010", HttpStatus.OK),
	CERTIFICATE_CANCEL_FAILED("CC011", HttpStatus.INTERNAL_SERVER_ERROR),
    DATE_INVALID("CC012", HttpStatus.BAD_REQUEST),

    //Download certificate
	CERTIFICATE_NOT_EXIST("DC001", HttpStatus.BAD_REQUEST),
    ALL_FIELDS_MISSING("DC002", HttpStatus.BAD_REQUEST),
    UNABLE_TO_DOWNLOAD_CERTIFICATE("DC003", HttpStatus.INTERNAL_SERVER_ERROR),

    // Export Certificate
    CERTIFICATE_EXPORT_CRITERIA_REQUIRED("EC001", HttpStatus.BAD_REQUEST),
    CERTIFICATE_SEARCH_CRITERIA_REQUIRED("EC002", HttpStatus.BAD_REQUEST),
    EXPORT_CERTIFICATE_NUMBERS_REQUIRED("EC003", HttpStatus.BAD_REQUEST),
    DESELECTED_CERTIFICATE_NUMBERS_REQUIRED("EC004", HttpStatus.BAD_REQUEST),

    // Create Claim
    EMPTY_MANDATORY_FIELD_CLAIM("RC001", HttpStatus.BAD_REQUEST),
	WORKER_NO_POLICY("RC002", HttpStatus.BAD_REQUEST),
    WORKER_EXIST_POLICY_REPATRIATION("RC003", HttpStatus.BAD_REQUEST),
	CLAIM_CREATED("RC004", HttpStatus.OK),
	CLAIM_CREATION_FAILED("RC005", HttpStatus.INTERNAL_SERVER_ERROR),
    INVALID_CLAIM_DOCUMENT("RC006", HttpStatus.BAD_REQUEST),
	ALREADY_CREATED_CLAIM("RC007", HttpStatus.BAD_REQUEST),
    CERTIFICATE_ALREADY_CANCELLED("RC008", HttpStatus.BAD_REQUEST),
	EMPTY_COMPALINT_FIELD("RC009", HttpStatus.BAD_REQUEST),
	EMPTY_EMPLOYER_NAME_FIELD("RC010", HttpStatus.BAD_REQUEST),
	EMPTY_EMPLOYER_LICENSE_FIELD("RC011", HttpStatus.BAD_REQUEST),
	EMPTY_CERTIFICATE_FIELD("RC012", HttpStatus.BAD_REQUEST),
	EMPTY_CLAIM_REASON_FIELD("RC013", HttpStatus.BAD_REQUEST),
	EMPTY_CLAIM_DESCRIPTION_FIELD("RC014", HttpStatus.BAD_REQUEST),
	EMPTY_PAYMENT_FIELD("RC015", HttpStatus.BAD_REQUEST),
	EMPTY_PAYEETYPE_FIELD("RC016", HttpStatus.BAD_REQUEST),
	EMPTY_CLAIM_AMOUNT_FIELD("RC017", HttpStatus.BAD_REQUEST),
	EMPTY_PHONE_FIELD("RC018", HttpStatus.BAD_REQUEST),
	EMPTY_EMAIL_FIELD("RC019", HttpStatus.BAD_REQUEST),
	INVALID_PAYEE_TYPE("UC008",HttpStatus.BAD_REQUEST),

	// Update Claim
	COMPLAINT_NUMBER_MISSING("UC001", HttpStatus.BAD_REQUEST),
	CLAIM_UPDATED("UC002", HttpStatus.OK),
	CLAIM_UPDATATION_FAILED("UC003", HttpStatus.INTERNAL_SERVER_ERROR),
	CLAIM_DOES_NOT_EXIST("UC004", HttpStatus.BAD_REQUEST),
	COMPLAINT_NO_EMIRATES_ID_MISMATCH("UC005", HttpStatus.BAD_REQUEST),
    INVALID_LAUNCH_DATE("UC006", HttpStatus.BAD_REQUEST),
    WORKER_POLICY_EXPIRED("UC007",HttpStatus.BAD_REQUEST),
    INVALID_INPUT_TYPE("UC008",HttpStatus.BAD_REQUEST),
    TO("UC009",HttpStatus.OK),
    DECLINE_CLAIM("UC010",HttpStatus.OK),
    CLOSE_CLAIM("UC011",HttpStatus.OK),
    RE_OPEN_CLAIM("UC012",HttpStatus.OK),

    // Claim Action
    CANT_REOPEN_CLOSED_CLAIM("CA001", HttpStatus.BAD_REQUEST),
    INVALID_CLAIM_ACTION("CA002", HttpStatus.BAD_REQUEST),
    REOPEN_CLAIM_SUCCESSFUL("CA003", HttpStatus.OK),
    DECLINE_CLAIM_SUCCESSFUL("CA004", HttpStatus.OK),
    CLOSE_CLAIM_SUCCESSFUL("CA005", HttpStatus.OK),
    PAYMENT_REVIEW_UPDATE_SUCCESSFUL("CA006", HttpStatus.OK),
    PAYMENT_APPROVE_UPDATE_SUCCESSFUL("CA007", HttpStatus.OK),

    // Payment
    CANT_EDIT_APPROVED_PAYMENT("PA001", HttpStatus.BAD_REQUEST),
    CANT_REVIEW_PAYMENT("PA002", HttpStatus.BAD_REQUEST),
    CANT_APPROVE_PAYMENT("PA003", HttpStatus.BAD_REQUEST),
    USER_GROUP_ID_REQUIRED("PA004", HttpStatus.BAD_REQUEST),
    INVALID_USER_GROUP_ID("PA005", HttpStatus.BAD_REQUEST),

    // DMS
	UNSUPPORTED_FILE_FORMAT("645", HttpStatus.BAD_REQUEST), SERVER_ERROR_DMS("646", HttpStatus.BAD_REQUEST),
	NO_RESULTS_FOUND_ERROR("650", HttpStatus.BAD_REQUEST),
	DOCUMENT_DOWNLOAD_ERROR("656", HttpStatus.INTERNAL_SERVER_ERROR),
	DOCUMENT_NOT_FOUND_ERROR("657", HttpStatus.BAD_REQUEST),
	MISSING_MANDATORY_FIELDS("658", HttpStatus.BAD_REQUEST),
    OPEN_OFFICE_NOT_STARTED("661", HttpStatus.INTERNAL_SERVER_ERROR),
    OPEN_OFFICE_CONVERSION_NOT_WORKING("662", HttpStatus.INTERNAL_SERVER_ERROR),
    DMS_UNAVAILABLE("663", HttpStatus.INTERNAL_SERVER_ERROR),

	//make payment api
	EMPTY_PAYMENT_AMOUNT("UC013", HttpStatus.BAD_REQUEST),
	EMPTY_PAYEE_NAME("UC014", HttpStatus.BAD_REQUEST),
	PAYMENT_AMOUNT("UC015", HttpStatus.BAD_REQUEST),
    PAYMENT_EXCEED("UC025", HttpStatus.BAD_REQUEST),

	// Security
    INVALID_REQUEST("AbstractUserDetailsAuthenticationProvider.badCredentials", HttpStatus.BAD_REQUEST),

    // Payload
    CERTIFICATE_DOES_NOT_EXIST("PC001", HttpStatus.BAD_REQUEST),

    // Acknowledge certificate
    CERTIFICATE_NO_MISSING("AC001", HttpStatus.BAD_REQUEST),
    VISA_APPROVAL_DATE_MISSING("AC002", HttpStatus.BAD_REQUEST),
    VISA_EXPIRY_DATE_MISSING("AC003", HttpStatus.BAD_REQUEST),
    ACKNOWLEDGEMENT_ALREADY_SENT("AC004", HttpStatus.BAD_REQUEST),
    ACK_CERTIFICATE_DOES_NOT_EXIST("AC005", HttpStatus.BAD_REQUEST),

    // Batch certificate process
    BATCH_ID_MISSING("BC001", HttpStatus.BAD_REQUEST),
    NO_BATCH_TO_PROCESS("BC002", HttpStatus.INTERNAL_SERVER_ERROR),
    FEW_BATCH_INPROGRESS("BC003", HttpStatus.INTERNAL_SERVER_ERROR),
    ALL_BATCH_PROCESSED("BC004", HttpStatus.INTERNAL_SERVER_ERROR),
    BATCH_PROCESS_INITIATED("BC005", HttpStatus.OK),
    

    // Update Certificate
    INVALID_CERTIFICATE_NUMBER("UC016", HttpStatus.BAD_REQUEST),
    EMPLOYEE_CATEGORY_MODIFY("UC017", HttpStatus.BAD_REQUEST),
    CERTIFICATE_NO_MANDATORTY("UC018", HttpStatus.BAD_REQUEST),
    ENDORSEMENT_DATE_FORMAT_INVALID("UC019", HttpStatus.BAD_REQUEST),
    INVALID_ENDORSEMENT_DATE("UC020", HttpStatus.BAD_REQUEST),
    ENDORSEMENT_DATE_INVALID("UC021", HttpStatus.BAD_REQUEST),
    ENDORSEMENT_NO_MANDATORTY("UC022", HttpStatus.BAD_REQUEST),
    CANCELLED_CERTIFICATE_CANNOT_UPDATE("UC023", HttpStatus.BAD_REQUEST),
    POLICY_NOT_FOUND("UC024", HttpStatus.NOT_FOUND),
    CERTIFICATE_UPDATE_PROCESS_FAILED("CC011", HttpStatus.INTERNAL_SERVER_ERROR),

    // Dashboard
    DASHBOARD_FROM_DATE_FORMAT_INVALID("DB001", HttpStatus.BAD_REQUEST),
    DASHBOARD_TO_DATE_FORMAT_INVALID("DB002", HttpStatus.BAD_REQUEST),
    EMPTY_DASHBOARD_FROM_DATE("DB003", HttpStatus.BAD_REQUEST),
    EMPTY_DASHBOARD_TO_DATE("DB004", HttpStatus.BAD_REQUEST),

    // Insurer 
    INSURER_PROCESS_FROM_DATE_FORMAT_INVALID("I001", HttpStatus.BAD_REQUEST),
    INSURER_PROCESS_TO_DATE_FORMAT_INVALID("I002", HttpStatus.BAD_REQUEST),
    EMPTY_INSURER_PROCESS_FROM_DATE("I003", HttpStatus.BAD_REQUEST),
    EMPTY_INSURER_PROCESS_TO_DATE("I004", HttpStatus.BAD_REQUEST),
    INSURER_PROCESS_PROCESS_DATE_FORMAT_INVALID("I005", HttpStatus.BAD_REQUEST),

    //pool Insurer 
    POOL_INSURER_FROM_DATE_FORMAT_INVALID("PI001", HttpStatus.BAD_REQUEST),
    POOL_INSURER_TO_DATE_FORMAT_INVALID("PI002", HttpStatus.BAD_REQUEST),
    EMPTY_POOL_INSURER_FROM_DATE("PI003", HttpStatus.BAD_REQUEST),
    EMPTY_POOL_INSURER_TO_DATE("PI004", HttpStatus.BAD_REQUEST),
    BATCH_ID_REQUIRED("PI005", HttpStatus.BAD_REQUEST),
    BATCH_NOT_AVAILABLE("PI006", HttpStatus.BAD_REQUEST),

    // ReInsurer
    REINSURER_FROM_DATE_FORMAT_INVALID("RI001", HttpStatus.BAD_REQUEST),
    REINSURER_TO_DATE_FORMAT_INVALID("RI002", HttpStatus.BAD_REQUEST),
    EMPTY_REINSURER_FROM_DATE("RI003", HttpStatus.BAD_REQUEST),
    EMPTY_REINSURER_TO_DATE("RI004", HttpStatus.BAD_REQUEST);


	private final String code;
	private final HttpStatus status;
	private static final Map<String, ErrorCode> lookup = new HashMap<>();

	static {
		for (ErrorCode e : ErrorCode.values()) {
			lookup.put(e.getCode(), e);
		}
	}

    private ErrorCode(String code, HttpStatus status) {
        this.code = code;
        this.status = status;
    }

    public String getCode() {
        return code;
    }

    public HttpStatus getHttpStatus() {
        return status;
    }

    @Override
    public String toString() {
        return "Error Code:" + code;
    }

	public static ErrorCode get(String code) {
		return lookup.get(code);
	}
}
